canvas {
  width = 800
  height = 700
}

forall Set x {

    x.x1x = ?
    x.x1y = ?
    x.x2x = ?
    x.x2y = ?
    x.x3x = ?
    x.x3y = ?
    
    x.x1 = (x.x1x, x.x1y)
    x.x2 = (x.x2x, x.x2y)
    x.x3 = (x.x3x, x.x3y)

    x.icon = Polygon {
        strokeWidth : 0.0
        -- fillColor: rgba(0,0,0,.5)
        points : [ x.x1, x.x2, x.x3 ]
        -- points: [(?, ?), (?, ?), (?, ?)]
    }

    x.icon1 = Circle {
        strokeWidth : 0.0
        fillColor: rgba(1, 0, 0, 1)
        r : 10
        center : x.x1
    }

    x.icon2 = Circle {
        strokeWidth : 0.0
        fillColor: rgba(0, 1, 0, 1)
        r : 10
        center : x.x2
    }

    x.icon3 = Circle {
        strokeWidth : 0.0
        fillColor: rgba(0, 0, 1, 1)
        r : 10
        center : x.x3
    }

    -- x.text = Equation {
    --     string : x.label
    -- }

    -- ensure contains(x.icon, x.text)
    -- ensure minSize(x.icon, 20)
    ensure maxSize(x.icon, 500)
    -- encourage sameCenter(x.text, x.icon)
    -- override x.textLayering = x.text above x.icon
}

forall Set x; Set y
where IsSubset(x, y) {

    ensure smallerThan(x.icon, y.icon)
    ensure disjoint(y.text, x.icon, 10.0)
    ensure contains(y.icon, x.icon, 5.0)
    x.icon above y.icon
}

-- TODO: Fix that the resample hack breaks on switching examples since it saves the cached functions...
-- TOOD: Also breaks if you resample without generating the function on first sample. Clearly this should be part of the state

forall Set x; Set y
where Not(Intersecting(x, y)) {
    ensure disjoint(x.icon, y.icon)
}

----------- NEW

forall Set x; Set y
where Intersecting(x, y) {
    ensure overlapping(x.icon, y.icon)
}

forall Point p {
    p.icon = Circle {
        strokeWidth : 0.0
        fillColor : rgba(0.0, 0.0, 0.0, 1.0)
        r : 20.0
    }
}

Point p
with Set A
where PointIn(A, p) {
    ensure contains(A.icon, p.icon)
    override p.layering = p.icon above A.icon
}

Point p
with Set A
where Not(PointIn(A, p)) {
    ensure disjoint(A.icon, p.icon)
}
