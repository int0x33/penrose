canvas {
   scalar width  = 960.
   scalar height = 540.
}

Colors {
   vec4 clear     = rgba( 0., 0., 0., 0. )
   vec4 black     = rgba( 0., 0., 0., 1. )
   vec4 gray      = rgba( .5, .5, .5, 1. )
   vec4 lightGray = rgba( .9, .9, .9, 1. )
   vec4 white     = rgba( 1., 1., 1., 1. )
   vec4 red       = rgba( 1., 0., 0., 1. )
   vec4 blue      = rgba( 0., 0., 1., 1. )
   vec4 darkRed   = rgba( .7, 0., 0., 1. )
   vec4 darkBlue  = rgba( 0., 0., .7, 1. )
   vec4 turquoise  = rgba( .1, .7, .6, 1. )
}

Global {
   scalar atomRadius = 25.
   scalar bondLength = 60.

   shape bbox = Rectangle {
      w : canvas.width
      h : canvas.height
      center : (0.,0.)
      color : Colors.clear
      strokeColor : Colors.gray
   }
}

forall Molecule m {

   scalar cx = ?
   scalar cy = ?
   vec2 m.center = (cx,cy)

   scalar R = Global.atomRadius

   shape m.icon = Circle {
      r : R
      center : m.center
      color : Colors.white
      strokeColor : Colors.black
      strokeWidth : 3.
   }

   shape m.shadow = Ellipse {
      rx : 2.*Global.atomRadius
      ry : Global.atomRadius
      center : (cx,cy) + (0.,-4.*R)
      color : rgba( .95, .95, .95, 1. )
      strokeColor : Colors.clear
      strokeWidth : 3.
   }

   shape m.text = Text {
      string : m.label
      center : m.center
      color : Colors.black
      fontSize : "14pt"
   }

   ensure contains( Global.bbox, m.icon, 0. )

   layer m.icon below m.text
}

forall FunctionalGroup g {
   override g.icon.color = Colors.clear
   override g.icon.strokeColor = Colors.clear
   override g.text.color = Colors.black
   override g.shadow.color = Colors.clear

   g.box = Rectangle {
      center : g.center
      w : 3.*Global.atomRadius
      h : 1.5*Global.atomRadius
      color : Colors.lightGray
      strokeColor : Colors.gray
      strokeWidth : 3.
      rx : 10.
   }

   layer g.shadow below g.box
}

forall Oxygen a {
   override a.icon.color = Colors.white
   override a.icon.strokeColor = Colors.red
   override a.text.color = Colors.white
   override a.text.string = ""
}

forall Carbon a {
   override a.icon.color = Colors.white
   override a.icon.strokeColor = Colors.black
   override a.text.color = Colors.white
   override a.text.string = ""
}

forall Nitrogen a {
   override a.icon.color = Colors.white
   override a.icon.strokeColor = Colors.blue
   override a.text.color = Colors.white
   override a.text.string = ""
}

forall Hydrogen a {
   override a.icon.color = Colors.white
   override a.icon.strokeColor = Colors.gray
   override a.text.color = Colors.black
   override a.text.string = ""

   -- make hydrogen atoms (and their shadows) smaller
   override a.icon.r = .75*Global.atomRadius
   override a.shadow.rx = .75*2.*Global.atomRadius
   override a.shadow.ry = .75*Global.atomRadius
}

forall Molecule m1; Molecule m2
where SingleBonded( m1, m2 ) {

   vec2 x1 = m1.center
   vec2 x2 = m2.center
   vec2 u = unit(x1-x2)
   scalar r = Global.atomRadius

   shape line = Line {
      start : x1 - .5*r*u
        end : x2 + .5*r*u
      thickness : 10.
      color : Colors.turquoise
      strokeLineCap: "round"
   }

   shape innerLine = Line {
      start : x1 - .5*r*u
        end : x2 + .5*r*u
      thickness : 4.
      color : Colors.white
      strokeLineCap: "round"
   }

   encourage equal( norm(x1-x2), Global.bondLength )

   layer line above m2.icon
   layer innerLine above line
   layer innerLine below m1.icon
}

forall Molecule m1; Molecule m2
where DoubleBonded( m1, m2 ) {

   vec2 x1 = m1.center
   vec2 x2 = m2.center
   vec2 u = unit(x1-x2)
   vec2 v = ( -u[1], u[0] )
   scalar r = Global.atomRadius

   shape line1 = Line {
      start : x1 - .5*r*u - .25*r*v
        end : x2 + .5*r*u - .25*r*v
      thickness : 10.
      color : Colors.turquoise
      strokeLineCap: "round"
   }

   shape innerLine1 = Line {
      start : x1 - .5*r*u - .25*r*v
        end : x2 + .5*r*u - .25*r*v
      thickness : 4.
      color : Colors.white
      strokeLineCap: "round"
   }

   shape line2 = Line {
      start : x1 - .5*r*u + .25*r*v
        end : x2 + .5*r*u + .25*r*v
      thickness : 10.
      color : Colors.turquoise
      strokeLineCap: "round"
   }

   shape innerLine2 = Line {
      start : x1 - .5*r*u + .25*r*v
        end : x2 + .5*r*u + .25*r*v
      thickness : 4.
      color : Colors.white
      strokeLineCap: "round"
   }

   encourage equal( norm(x1-x2), Global.bondLength )

   layer line1 above m2.icon
   layer innerLine1 above line1
   layer innerLine1 below m1.icon

   layer line2 above m2.icon
   layer innerLine2 above line2
   layer innerLine2 below m1.icon

   layer line2 above innerLine1
}

-- make bonds with hydrogen shorter
forall Molecule m; Hydrogen h
where SingleBonded(m,h) {
   vec2 x1 = m.center
   vec2 x2 = h.center
   encourage equal( 2.*norm(x1-x2), .5*Global.bondLength )
}

forall Molecule m1; Molecule m2 {
   vec2 x1 = m1.center
   vec2 x2 = m2.center
   encourage equal( 200000./normsq(x1-x2), 0. )

   -- make sure shadows are drawn below all molecules
   layer m1.shadow below m2.icon
   layer m2.shadow below m1.icon
}

