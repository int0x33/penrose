canvas {
   scalar width  = 1066.5
   scalar height = 600.0
}

Colors {
   vec4 clear     = rgba( 0., 0., 0., 0. )
   vec4 black     = rgba( 0., 0., 0., 1. )
   vec4 gray      = rgba( .5, .5, .5, 1. )
   vec4 white     = rgba( 1., 1., 1., 1. )
   vec4 red       = rgba( 1., 0., 0., 1. )
   vec4 blue      = rgba( 0., 0., 1., 1. )
   vec4 darkRed   = rgba( .7, 0., 0., 1. )
   vec4 darkBlue  = rgba( 0., 0., .7, 1. )
}

Global {
   scalar atomRadius = 20.
   scalar bondLength = 60.

   shape bbox = Rectangle {
      w : canvas.width
      h : canvas.height
      center : (0.,0.)
      color : Colors.clear
      strokeColor : Colors.gray
   }
}

forall Molecule m {

   vec2 m.center = (?,?)

   shape m.icon = Circle {
      r : Global.atomRadius
      center : m.center
      color : Colors.white
      strokeColor : Colors.black
      strokeWidth : 2.
   }

   shape m.background = Circle {
      r : Global.atomRadius * 4.
      center : m.center
      color : rgba( .95, .95, .95, 1. )
      strokeColor : Colors.clear
   }

   -- m.background = Image {
   --    path : "atom.svg"
   --    center : (?,?)
   --    w : 4.*Global.atomRadius
   --    h : 4.*Global.atomRadius
   -- }

   shape m.text = Text {
      string : m.label
      center : m.center
      color : Colors.black
      fontSize : "14pt"
   }

   ensure contains( Global.bbox, m.icon, 0. )

   layer m.icon below m.text
   layer m.background below m.icon
   layer m.icon above Global.bbox
   layer m.background above Global.bbox
   layer m.text above Global.bbox
}

forall FunctionalGroup g {
   override g.icon.color = Colors.clear
   override g.icon.strokeColor = Colors.clear
   override g.text.color = Colors.black
}

forall Hydrogen a {
   override a.icon.color = Colors.red
   override a.icon.strokeColor = Colors.darkRed
   override a.text.color = Colors.white
   override a.text.string = "\text{H}"
}

forall Carbon a {
   override a.icon.color = Colors.black
   override a.icon.strokeColor = Colors.gray
   override a.text.color = Colors.white
   override a.text.string = "\text{C}"
}

forall Nitrogen a {
   override a.icon.color = Colors.blue
   override a.icon.strokeColor = Colors.darkBlue
   override a.text.color = Colors.white
   override a.text.string = "\text{N}"
}

forall Oxygen a {
   override a.icon.color = Colors.white
   override a.icon.strokeColor = Colors.gray
   override a.text.color = Colors.black
   override a.text.string = "\text{O}"
}

forall Molecule m1; Molecule m2
where SingleBonded( m1, m2 ) {

   vec2 x1 = m1.center
   vec2 x2 = m2.center
   vec2 u = unit(x1-x2)
   scalar r = Global.atomRadius

   shape line = Line {
      start : x1 - 1.3*r*u
        end : x2 + 1.3*r*u
      thickness : 4.
      color : Colors.black
   }

   encourage equal( norm(x1-x2), Global.bondLength )

   layer line below m1.icon
   layer line below m2.icon
   layer m1.background below line
   layer m2.background below line
}

forall Molecule m1; Molecule m2
where DoubleBonded( m1, m2 ) {

   vec2 x1 = m1.center
   vec2 x2 = m2.center
   vec2 u = unit(x1-x2)
   vec2 v = ( -u[1], u[0] )
   scalar r = Global.atomRadius

   shape line1 = Line {
      start : x1 - 1.3*r*u - .25*r*v
        end : x2 + 1.3*r*u - .25*r*v
      thickness : 4.
      color : Colors.black
   }

   shape line2 = Line {
      start : x1 - 1.3*r*u + .25*r*v
        end : x2 + 1.3*r*u + .25*r*v
      thickness : 4.
      color : Colors.black
   }

   encourage equal( norm(x1-x2), Global.bondLength )

   layer line1 below m1.icon
   layer line2 below m1.icon
   layer line1 below m2.icon
   layer line2 below m2.icon
   layer m1.background below line1
   layer m2.background below line1
   layer m1.background below line2
   layer m2.background below line2
}

forall Molecule m1; Molecule m2 {
   vec2 x1 = m1.center
   vec2 x2 = m2.center
   encourage equal( 200000./normsq(x1-x2), 0. )
   layer m1.background below m2.icon
   layer m2.background below m1.icon
}

-- DEBUG -----------------------------------------------

forall Point p {
   shape p.icon = Circle {
      center : (?,?)
      r : .25 * Global.atomRadius
      color : Colors.black
   }

   ensure contains( Global.bbox, p.icon, 0. )
}

forall Point a; Point b; Point c
where Triangle(a,b,c)
{
   vec2 x = a.icon.center
   vec2 y = b.icon.center
   vec2 z = c.icon.center

   scalar A = cross2D( y-x, z-x )
   scalar s = sgn(A)
   scalar t = .5*s + .5

   pts = [x, y, z]
   shape P = Path {
      pathData : pathFromPoints( "closed", pts )
      fill : rgba( .3, .8, .3, .2 )
      color : Colors.clear
   }
   shape C = Circle {
      center : (canvas.width/3.,canvas.height/3.)
      r : 100.
      color : rgba( t, 1.-t, 0., 1. )
   }

   ensure lessThan( A, 0. )
}

-- TODO: prevent edge crossings
-- forall Molecule p1; Molecule p2; Molecule q1; Molecule q2
-- where SingleBonded( p1, p2 ); SingleBonded( q1; q2 ) {
--    vec2 a = p1.center
--    vec2 b = p2.center
--    vec2 c = q1.center
--    vec2 d = q2.center
-- }

